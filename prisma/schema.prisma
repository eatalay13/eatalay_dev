// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(200)
  password  String   @db.VarChar(255)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blog[]

  @@index([id])
  @@index([email])
  @@map("users")
}

model HtmlSeoContent {
  id          String     @id @default(uuid())
  title       String     @db.VarChar(255)
  description String     @db.VarChar(1000)
  keywords    String     @db.VarChar(1000)
  content     String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  blogs       Blog[]
  categories  Category[]
  projects    Project[]

  @@index([id])
  @@index([title])
  @@map("html_seo_contents")
}

model Blog {
  id               String         @id @default(uuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  HtmlSeoContentId String
  HtmlSeoContent   HtmlSeoContent @relation(fields: [HtmlSeoContentId], references: [id])
  title            String         @db.VarChar(255)
  slug             String         @unique @db.VarChar(255)
  image            String         @db.VarChar(255)
  content          String         @db.Text
  readCount        Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  comments         Comment[]
  categories       BlogCategory[]

  @@index([id])
  @@index([slug])
  @@map("blogs")
}

model Category {
  id               String         @id @default(uuid())
  parentId         String?
  parent           Category?      @relation("CategoryToCategory", fields: [parentId], references: [id])
  htmlSeoContentId String
  htmlSeoContent   HtmlSeoContent @relation(fields: [htmlSeoContentId], references: [id])
  name             String         @db.VarChar(255)
  slug             String         @unique @db.VarChar(255)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  children         Category[]     @relation("CategoryToCategory")
  blogs            BlogCategory[]

  @@index([id])
  @@index([slug])
  @@map("categories")
}

model BlogCategory {
  id         String   @id @default(uuid())
  blogId     String
  blog       Blog     @relation(fields: [blogId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
}

model Comment {
  id         String    @id @default(uuid())
  parentId   String?
  parent     Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  blogId     String
  blog       Blog      @relation(fields: [blogId], references: [id])
  content    String    @db.Text
  isApproved Boolean   @default(false)
  createdAt  DateTime  @default(now())
  children   Comment[] @relation("CommentToComment")

  @@index([id])
  @@map("comments")
}

model Project {
  id               String         @id @default(uuid())
  HtmlSeoContentId String
  HtmlSeoContent   HtmlSeoContent @relation(fields: [HtmlSeoContentId], references: [id])
  name             String         @db.VarChar(255)
  slug             String         @unique @db.VarChar(255)
  image            String         @db.VarChar(255)
  content          String         @db.Text
  readCount        Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([id])
  @@index([slug])
  @@map("projects")
}

model Contact {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  title     String   @db.VarChar(255)
  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@map("contacts")
}
